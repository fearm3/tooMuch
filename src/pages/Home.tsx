import Card from "../components/card";
import Spinner from "../assets/spinner.gif";
import { useEffect, useState } from "react";
import axios from "axios";

const Home = () => {
  const [artistData, setArtistData] = useState([]);
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(false);

  console.log("page", page);
  useEffect(() => {
    document.getElementById("root")?.addEventListener("scroll", handleScroll);
    console.log("scroll");

    return () =>
      document
        .getElementById("root")
        ?.removeEventListener("scroll", handleScroll);
  }, []);

  const handleScroll = async (e: any) => {
    // const element = document.querySelector(".c-card-group-container");

    if (window.innerHeight + e.target.scrollTop + 1 >= e.target.scrollHeight) {
      debugger;
      setLoading(true);
      setPage((prev) => prev + 1);
    }
  };

  useEffect(() => {
    setTimeout(async () => {
      debugger;
      const limit = 10;
      const apiKey = "26a81b39c319b65656d7858f3c50b416";

      const topArtistsUrl = `https://ws.audioscrobbler.com/2.0/?method=chart.gettopartists&page=${page}&limit=${limit}&api_key=${apiKey}&format=json`;

      const response = await axios.get(topArtistsUrl);

      setArtistData((prev): any => {
        return [...prev, ...response?.data?.artists?.artist];
      });
      setLoading(false);
    }, 1453);
  }, [page]);

  //!light-dark toogle
  const handleChangeTheme = (theme = "light") => {
    const homePageElement = document.querySelector(".home-page");
    const topArtistCardList = document.querySelectorAll(".micro-card-01");
    const headerEl = document.querySelector(".navbar-01");
    //!first remove all classes..
    homePageElement?.classList.remove("dark");
    headerEl?.classList.remove("dark");

    for (let i = 0; i < topArtistCardList.length; i++) {
      const artistCardElement = topArtistCardList[i];
      artistCardElement.classList.remove("dark");
    }

    if (theme === "dark") {
      homePageElement?.classList.add("dark");
      headerEl?.classList.add("dark");

      for (let i = 0; i < topArtistCardList.length; i++) {
        const artistCardElement = topArtistCardList[i];
        artistCardElement.classList.add("dark");
      }
    }
  };

  return (
    <>
      {artistData?.length === 0 ? (
        <img src={Spinner} alt='spinnerEl' className='spinner-01' />
      ) : (
        <div className='home-page'>
          <div className='c-toogle-button-group'>
            <a href='#!' onClick={() => handleChangeTheme()}>
              <svg
                className='c-item-01'
                width='50'
                height='50'
                viewBox='0 0 18 19'
                fill='none'
                xmlns='http://www.w3.org/2000/svg'
              >
                <path
                  d='M8.97507 15.6233C7.76225 15.6314 6.57449 15.2672 5.56291 14.5771C4.55133 13.887 3.76166 12.9021 3.29435 11.7478C2.82703 10.5935 2.70321 9.32188 2.93863 8.09476C3.17404 6.86764 3.75806 5.74049 4.61638 4.85669C5.4747 3.97289 6.56852 3.3724 7.75869 3.13161C8.94885 2.89082 10.1816 3.02062 11.3 3.5045C12.4184 3.98837 13.372 4.80444 14.0395 5.8489C14.7069 6.89335 15.0581 8.11897 15.0482 9.36984C15.0351 11.026 14.3908 12.6103 13.2544 13.7804C12.118 14.9505 10.5808 15.6125 8.97507 15.6233ZM9.57341 1.74849V0.637684C9.57349 0.472064 9.5111 0.312908 9.39942 0.193893C9.28775 0.0748782 9.13557 0.00534256 8.97507 5.14944e-09C8.81016 -2.14228e-05 8.65185 0.0668329 8.53432 0.186135C8.41678 0.305437 8.34943 0.467621 8.34682 0.637684V1.74849C8.34682 1.91761 8.41195 2.07981 8.52791 2.1994C8.64386 2.31899 8.80112 2.38617 8.9651 2.38617C9.12653 2.3809 9.27979 2.31172 9.39307 2.19297C9.50634 2.07423 9.57092 1.91505 9.57341 1.74849ZM9.57341 18.0094V16.8986C9.57341 16.7295 9.50827 16.5673 9.39232 16.4477C9.27637 16.3281 9.1191 16.2609 8.95512 16.2609C8.79115 16.2609 8.63388 16.3281 8.51793 16.4477C8.40198 16.5673 8.33684 16.7295 8.33684 16.8986V18.0094C8.33684 18.1786 8.40198 18.3408 8.51793 18.4603C8.63388 18.5799 8.79115 18.6471 8.95512 18.6471C9.1191 18.6471 9.27637 18.5799 9.39232 18.4603C9.50827 18.3408 9.57341 18.1786 9.57341 18.0094ZM18 9.36984C18 9.20072 17.9349 9.03852 17.8189 8.91893C17.703 8.79934 17.5457 8.73216 17.3817 8.73216H16.3047C16.1407 8.73216 15.9835 8.79934 15.8675 8.91893C15.7516 9.03852 15.6864 9.20072 15.6864 9.36984C15.6864 9.53897 15.7516 9.70116 15.8675 9.82075C15.9835 9.94034 16.1407 10.0075 16.3047 10.0075H17.3817C17.4629 10.0075 17.5433 9.99103 17.6183 9.95898C17.6933 9.92694 17.7615 9.87997 17.8189 9.82075C17.8763 9.76154 17.9219 9.69124 17.9529 9.61387C17.984 9.5365 18 9.45358 18 9.36984ZM2.27369 9.36984C2.27369 9.20072 2.20855 9.03852 2.09259 8.91893C1.97664 8.79934 1.81938 8.73216 1.6554 8.73216H0.578395C0.421426 8.74262 0.274227 8.8144 0.166768 8.93287C0.0593104 9.05135 -0.000326336 9.20761 1.34321e-06 9.36984C1.34321e-06 9.53897 0.0651416 9.70116 0.181092 9.82075C0.297043 9.94034 0.454305 10.0075 0.618284 10.0075H1.6554C1.73697 10.0089 1.81797 9.99337 1.8936 9.96182C1.96922 9.93026 2.03791 9.88334 2.0956 9.82385C2.15328 9.76436 2.19877 9.6935 2.22937 9.61551C2.25996 9.53751 2.27503 9.45397 2.27369 9.36984ZM15.3873 16.0141C15.4464 15.9555 15.4934 15.8853 15.5255 15.8075C15.5577 15.7297 15.5742 15.6461 15.5742 15.5615C15.5742 15.477 15.5577 15.3933 15.5255 15.3156C15.4934 15.2378 15.4464 15.1675 15.3873 15.109L14.6294 14.317C14.513 14.197 14.3552 14.1296 14.1906 14.1296C14.026 14.1296 13.8682 14.197 13.7518 14.317C13.6354 14.4371 13.5701 14.5998 13.5701 14.7696C13.5701 14.9393 13.6354 15.1021 13.7518 15.2221L14.5097 16.0141C14.627 16.1322 14.7845 16.1983 14.9485 16.1983C15.1124 16.1983 15.2699 16.1322 15.3873 16.0141ZM4.2482 4.46379C4.30732 4.40524 4.35436 4.33497 4.38649 4.2572C4.41862 4.17944 4.43519 4.09577 4.43519 4.01124C4.43519 3.9267 4.41862 3.84304 4.38649 3.76527C4.35436 3.68751 4.30732 3.61724 4.2482 3.55869L3.49031 2.76673C3.43284 2.70702 3.36448 2.65963 3.28917 2.62729C3.21386 2.59496 3.1331 2.57831 3.05152 2.57831C2.96995 2.57831 2.88919 2.59496 2.81388 2.62729C2.73857 2.65963 2.67021 2.70702 2.61274 2.76673C2.55362 2.82528 2.50658 2.89554 2.47445 2.97331C2.44232 3.05108 2.42576 3.13474 2.42576 3.21928C2.42576 3.30381 2.44232 3.38747 2.47445 3.46524C2.50658 3.54301 2.55362 3.61328 2.61274 3.67183L3.37064 4.46379C3.48799 4.5819 3.64546 4.64801 3.80942 4.64801C3.97338 4.64801 4.13085 4.5819 4.2482 4.46379ZM3.48033 16.0038L4.2482 15.2221C4.30582 15.1627 4.35153 15.0922 4.38271 15.0145C4.4139 14.9369 4.42995 14.8536 4.42995 14.7696C4.42995 14.6855 4.4139 14.6023 4.38271 14.5247C4.35153 14.447 4.30582 14.3765 4.2482 14.317C4.19058 14.2576 4.12217 14.2105 4.04689 14.1783C3.9716 14.1461 3.89091 14.1296 3.80942 14.1296C3.72793 14.1296 3.64724 14.1461 3.57195 14.1783C3.49667 14.2105 3.42826 14.2576 3.37064 14.317L2.60277 15.0987C2.54365 15.1573 2.49661 15.2275 2.46448 15.3053C2.43235 15.3831 2.41578 15.4667 2.41578 15.5513C2.41578 15.6358 2.43235 15.7195 2.46448 15.7972C2.49661 15.875 2.54365 15.9453 2.60277 16.0038C2.72012 16.1219 2.87759 16.188 3.04155 16.188C3.20552 16.188 3.36298 16.1219 3.48033 16.0038ZM14.6194 4.39179L15.3873 3.61011C15.4449 3.55068 15.4906 3.48013 15.5218 3.40248C15.553 3.32483 15.569 3.24161 15.569 3.15756C15.569 3.07352 15.553 2.99029 15.5218 2.91265C15.4906 2.835 15.4449 2.76444 15.3873 2.70501C15.3296 2.64558 15.2612 2.59844 15.1859 2.56628C15.1107 2.53412 15.03 2.51756 14.9485 2.51756C14.867 2.51756 14.7863 2.53412 14.711 2.56628C14.6357 2.59844 14.5673 2.64558 14.5097 2.70501L13.7418 3.48669C13.6255 3.60672 13.5601 3.7695 13.5601 3.93924C13.5601 4.10898 13.6255 4.27177 13.7418 4.39179C13.8582 4.51182 14.016 4.57924 14.1806 4.57924C14.3452 4.57924 14.503 4.51182 14.6194 4.39179Z'
                  fill='#FFC531'
                />
              </svg>
            </a>
            <a href='#!' onClick={() => handleChangeTheme("dark")}>
              <svg
                className='c-item-02'
                width='50'
                height='50'
                id='Layer_1'
                version='1.1'
                viewBox='0 0 512 512'
                xmlSpace='preserve'
                xmlns='http://www.w3.org/2000/svg'
                xmlnsXlink='http://www.w3.org/1999/xlink'
              >
                <g>
                  <g>
                    <path d='M343.1,315c-1.8,0.1-3.5,0.1-5.3,0.1c-29.1,0-56.5-11.3-77.1-31.9c-20.6-20.6-31.9-48-31.9-77.1    c0-16.6,3.7-32.6,10.6-47.1c3.1-6.4,6.8-12.5,11.1-18.2c-7.6,0.8-14.9,2.4-22,4.6c-46.8,14.8-80.7,58.5-80.7,110.2    c0,63.8,51.7,115.5,115.5,115.5c35.3,0,66.8-15.8,88-40.7c4.8-5.7,9.2-11.9,12.8-18.5C357.3,313.6,350.3,314.7,343.1,315z     M263.3,355.1c-54.9,0-99.5-44.6-99.5-99.5c0-39.1,22.6-72.9,55.4-89.2c-4.2,12.5-6.4,25.8-6.4,39.7c0,65.9,51,119.9,115.6,124.7    C311,346,288.2,355.1,263.3,355.1z' />
                  </g>
                </g>
              </svg>
            </a>
          </div>
          <div className='c-top-artist-list'>
            <h6 className='title-01'>Top Artist List</h6>
            <div className='c-card-group-container'>
              {artistData?.map((artist: any, index: number) => (
                <Card artist={artist} key={"artist - " + index} />
              ))}
              {loading && (
                <img className='spinner-00' src={Spinner} alt='spinner' />
              )}
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default Home;
